import os
import time
from io import BytesIO
from datetime import datetime

import pandas as pd
import streamlit as st

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, WebDriverException

# ---------------------------
# UI (Streamlit) ‚Äì apar√™ncia e layout
# ---------------------------
st.set_page_config(
    page_title="DB-Pricing",
    page_icon="üß™",
    layout="wide"
)

with st.sidebar:
    st.markdown("### üß™ DB-Pricing")
    st.caption("Coleta de pre√ßos ‚Äì Diagn√≥sticos do Brasil")
    st.markdown("---")
    st.markdown("**Dica:** use o c√≥digo do conv√™nio (ServSol) que aparece no final da URL, ex.: `c14296`.")

st.title("DB-Pricing")
st.subheader("Coletor de pre√ßos do Diagn√≥sticos do Brasil")

# ---------------------------
# Formul√°rio de entrada
# ---------------------------
with st.form("form_inputs", clear_on_submit=False):
    col1, col2 = st.columns([1,1])
    with col1:
        servsol = st.text_input("C√≥digo do Conv√™nio (ServSol)", placeholder="ex.: c14296").strip()
        usuario = st.text_input("Usu√°rio (CPF)", placeholder="00000000000").strip()
    with col2:
        senha = st.text_input("Senha", type="password")
        total_paginas = st.number_input("Limite de p√°ginas para coletar", 1, 500, value=50, step=1)

    submitted = st.form_submit_button("üîé Coletar e gerar Excel", use_container_width=True)

# ---------------------------
# Fun√ß√µes auxiliares Selenium
# ---------------------------
def build_driver():
    """
    Cria um Chrome headless usando o Chromium do ambiente do Streamlit Cloud.
    N√£o depende do SO do usu√°rio final.
    """
    chrome_options = webdriver.ChromeOptions()
    # Bin√°rio e driver do apt (Streamlit Cloud)
    chrome_bin = "/usr/bin/chromium"
    driver_bin = "/usr/bin/chromedriver"
    if os.path.exists(chrome_bin):
        chrome_options.binary_location = chrome_bin

    # flags necess√°rias no ambiente cloud
    chrome_options.add_argument("--headless=new")
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-notifications")
    chrome_options.add_argument("--disable-infobars")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--lang=pt-BR")

    service = Service(driver_bin) if os.path.exists(driver_bin) else Service()
    driver = webdriver.Chrome(service=service, options=chrome_options)
    driver.set_page_load_timeout(60)
    return driver

def wait_gone(driver, locator, timeout=15):
    try:
        WebDriverWait(driver, timeout).until(EC.invisibility_of_element_located(locator))
    except Exception:
        pass

def try_click_next(driver, timeout=10):
    """
    Clica no bot√£o 'next' da pagina√ß√£o.
    Retorna True se conseguiu clicar, False caso contr√°rio.
    """
    try:
        btn = WebDriverWait(driver, timeout).until(
            EC.element_to_be_clickable((By.XPATH, '//button[@aria-label="go to next page"]'))
        )
        btn.click()
        # pequena espera para render
        time.sleep(1.5)
        return True
    except Exception:
        return False

def coletar_pagina(driver):
    """
    L√™ todos os cards da p√°gina atual e retorna lista de dicts.
    Usa os mesmos seletores do seu rob√¥ original.
    """
    dados = []

    # Cada linha de resultado
    cards = driver.find_elements(By.XPATH, '//div[contains(@class,"container-wb-lista-historico-preco")]')
    if not cards:
        return dados

    # Em cada card existem 3 spans alvo:
    # - C√≥digo (20% | exps-txts-headers)
    # - Descri√ß√£o (45% | span texto)
    # - Valor (20% | exps-txts-headers)
    codigos = driver.find_elements(By.XPATH, '//div[@class="container-wb-lista-historico-preco"]//div[contains(@style,"width: 20%;")]/span[@class="exps-txts-headers"]')
    nomes   = driver.find_elements(By.XPATH, '//div[@class="container-wb-lista-historico-preco"]//div[contains(@style,"width: 45%;")]/span')
    valores = driver.find_elements(By.XPATH, '//div[@class="container-wb-lista-historico-preco"]//div[contains(@style,"width: 20%;") and contains(@style,"text-align: center")]/span[@class="exps-txts-headers"]')

    n = min(len(codigos), len(nomes), len(valores))
    agora = datetime.now().strftime("%d/%m/%Y %H:%M")

    for i in range(n):
        codigo = codigos[i].text.strip()
        nome   = nomes[i].text.strip()
        valor  = valores[i].text.strip()
        dados.append({
            "C√≥digo": codigo,
            "Exame": nome,
            "Valor": valor,
            "Data/Hora Coleta": agora
        })

    return dados

def fazer_login(driver, servsol, usuario, senha, status_cb):
    """
    Executa o login e navega at√© a Tabela de Pre√ßos (lista com bot√£o 'Filtrar').
    """
    base_login = f"https://out-prd.diagnosticosdobrasil.com.br/Portal/Login?ServSol={servsol}"
    status_cb.write("üåê Acessando login‚Ä¶")
    try:
        driver.get(base_login)
    except TimeoutException:
        driver.refresh()

    status_cb.write("‚åõ Esperando campos de login‚Ä¶")
    user_input = WebDriverWait(driver, 25).until(EC.presence_of_element_located((By.ID, "Input_UsernameVal")))
    pass_input = driver.find_element(By.ID, "Input_PasswordVal")

    user_input.clear(); user_input.send_keys(usuario)
    pass_input.clear(); pass_input.send_keys(senha)
    driver.find_element(By.CSS_SELECTOR, "button.btn-login").click()

    status_cb.write("üîê Autenticando‚Ä¶")
    # Quando o campo some √© porque entrou
    WebDriverWait(driver, 25).until_not(EC.presence_of_element_located((By.ID, "Input_UsernameVal")))
    status_cb.write("‚úÖ Login ok!")

    # Ir para o m√≥dulo Financeiro
    status_cb.write("üìÇ Abrindo Financeiro‚Ä¶")
    driver.get("https://out-prd.diagnosticosdobrasil.com.br/Portal/Financeiro?chave=")
    time.sleep(2)

    # Clicar no item "Tabela de Pre√ßos" do menu lateral (√© o primeiro .fin-sidemenu-item)
    menu = WebDriverWait(driver, 20).until(EC.element_to_be_clickable((By.CLASS_NAME, "fin-sidemenu-item")))
    menu.click()
    time.sleep(1.5)

    # Clicar no bot√£o "Filtrar"
    status_cb.write("üîé Aplicando filtro‚Ä¶")
    filtro = WebDriverWait(driver, 20).until(
        EC.element_to_be_clickable((By.XPATH, '//button[contains(@class,"btn-wb-hp-filtrar")]'))
    )
    filtro.click()
    time.sleep(2.5)

def rodar_coleta(servsol, usuario, senha, limite_paginas, progress, status_cb):
    """
    Orquestra tudo: login, leitura por p√°ginas e sa√≠da DataFrame.
    """
    driver = None
    try:
        driver = build_driver()
        fazer_login(driver, servsol, usuario, senha, status_cb)

        todas = []
        pagina = 1
        progress.progress(0.0, text="Coletando p√°gina 1‚Ä¶")

        while pagina <= limite_paginas:
            dados = coletar_pagina(driver)
            if dados:
                todas.extend(dados)
                status_cb.write(f"‚úÖ P√°gina {pagina} coletada ({len(dados)} registros).")
            else:
                status_cb.write(f"‚ö†Ô∏è P√°gina {pagina} sem dados.")
            # pr√≥xima
            if not try_click_next(driver):
                status_cb.write("‚õî N√£o h√° pr√≥xima p√°gina. Encerrando.")
                break

            pagina += 1
            progress.progress(min(pagina/limite_paginas, 1.0), text=f"Coletando p√°gina {pagina}‚Ä¶")

        df = pd.DataFrame(todas, columns=["C√≥digo", "Exame", "Valor", "Data/Hora Coleta"])
        return df

    except (TimeoutException, NoSuchElementException, WebDriverException) as e:
        status_cb.error(f"Erro durante a coleta: {e}")
        return pd.DataFrame(columns=["C√≥digo", "Exame", "Valor", "Data/Hora Coleta"])
    finally:
        try:
            if driver:
                driver.quit()
        except Exception:
            pass

# ---------------------------
# Execu√ß√£o quando enviar o formul√°rio
# ---------------------------
if submitted:
    if not servsol or not usuario or not senha:
        st.error("Por favor, preencha **ServSol**, **Usu√°rio** e **Senha**.")
        st.stop()

    # Normaliza ServSol (aceita ‚Äúc14296‚Äù ou ‚Äú14296‚Äù)
    if servsol.lower().startswith("c"):
        servsol = servsol.lower()
    else:
        servsol = f"c{servsol}"

    st.info(f"Conv√™nio: **{servsol}**")
    progress = st.progress(0.0, text="Iniciando‚Ä¶")
    status_cb = st.empty()

    df = rodar_coleta(servsol, usuario, senha, int(total_paginas), progress, status_cb)

    st.markdown("---")
    if df.empty:
        st.warning("Nenhum dado retornado. Verifique as credenciais/conv√™nio ou tente novamente.")
    else:
        st.success(f"Coleta finalizada! {len(df)} linhas.")
        st.dataframe(df, use_container_width=True, height=420)

        # Gera Excel em mem√≥ria
        output = BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="DB_Pricing")
        output.seek(0)

        st.download_button(
            label="üì• Baixar Excel (.xlsx)",
            data=output,
            file_name=f"DB_Pricing_{datetime.now().strftime('%Y%m%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            use_container_width=True,
        )

    progress.progress(1.0, text="Conclu√≠do!")
